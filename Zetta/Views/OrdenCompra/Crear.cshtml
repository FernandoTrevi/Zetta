@model Zetta.Models.ViewModels.OrdenCompraVM

@{
    ViewData["Title"] = "Crear Orden de Compra";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="border p-3">
    <div class="form-group row">
        <h2 class="text-info">Crear Orden de Compra</h2>
    </div>
    <hr />

    <form asp-controller="OrdenCompra" asp-action="Crear" method="post">
        <div class="row">
            <div class="col-md-6">
                <label asp-for="OrdenCompra.NroOrden" class="form-label">Nro de Orden</label>
                <input asp-for="OrdenCompra.NroOrden" class="form-control" />
                <span asp-validation-for="OrdenCompra.NroOrden" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="FechaActual" class="form-label">Fecha</label>
                <input type="date" class="form-control" asp-for="FechaActual" value="@Model.FechaActual.ToString("yyyy-MM-dd")" />
            </div>
        </div>
        <br />

        <div class="row">
            <div class="col-md-6">
                <label asp-for="OrdenCompra.ProveedorId" class="form-label">Proveedor</label>
                <select asp-for="OrdenCompra.ProveedorId" asp-items="@Model.ProveedorLista" class="form-select">
                    <option disabled selected>--Seleccione un Proveedor</option>
                </select>
                <span asp-validation-for="OrdenCompra.ProveedorId" class="text-danger"></span>

            </div>
            <div class="col-md-6">
                <label asp-for="OrdenCompra.Observaciones" class="form-label">Observaciones</label>
                <input asp-for="OrdenCompra.Observaciones" class="form-control" />
                <span asp-validation-for="OrdenCompra.Observaciones" class="text-danger"></span>
            </div>
        </div>
        <br />

        <h3 class="text-info">Detalles de Compra</h3>
        <hr />
        <br />

        <div class="row align-items-end">
            <div class="col-md-3">
                <label asp-for="ProductoCodigo" class="form-label">Código</label>
                <select asp-for="ProductoCodigo" id="ProductoCodigo" asp-items="@Model.ProductoCodigoLista" class="form-select">
                    <option value="" disabled selected>--Seleccione un Código</option>
                </select>
            </div>
            <div class="col-md-3">
                <label asp-for="ProductoNombre" class="form-label">Nombre</label>
                <select asp-for="ProductoNombre" id="ProductoNombre" asp-items="@Model.ProductoNombreLista" class="form-select">
                    <option value="" disabled selected>--Seleccione un Nombre</option>
                </select>
            </div>

            <div class="col-md-2">
                <label asp-for="ProductoCantidad" class="form-label">Cantidad</label>
                <input asp-for="ProductoCantidad" id="ProductoCantidad" class="form-control" />
                <span asp-validation-for="ProductoCantidad" class="text-danger"></span>
            </div>
            <div class="col-md-2">
                <label asp-for="ProductoPrecio" class="form-label">Precio</label>
                <input asp-for="ProductoPrecio" id="ProductoPrecio" class="form-control" type="number" step="0.1" />
                <span asp-validation-for="ProductoPrecio" class="text-danger"></span>
            </div>

            <div class="col-md-2">
                <button type="button" id="agregarProducto" onclick="AgregarDetalle()" class="btn btn-info form-control">Agregar Producto</button>
            </div>
        </div>


        <br />
        <div id="detalles">
            <table id="tablaDetalle" class="table table-bordered table-striped table-hover">
                <!-- Encabezado de la tabla -->
                <thead>
                    <tr class="table-dark text-center">
                        <th>Código</th>
                        <th>Nombre</th>
                        <th>Cantidad</th>
                        <th>Precio Unitario</th>
                        <th>Acciones</th>
                    </tr>
                </thead>

                <!-- Cuerpo de la tabla donde se agregarán filas dinámicamente -->
                <tbody>
                </tbody>
            </table>

        </div>
        <br />



        <div class="row">
           

            <div class="col-md-3">
                <button type="submit" class="btn btn-primary form-control" onclick="ValidarYEnviar(event)">Confirmar Orden</button>
            </div>

          

            <div class="col-md-3">
                <a asp-controller="OrdenCompra" asp-action="Index" class="btn btn-secondary form-control">Regresar</a>
            </div>
        </div>
        <br />

    </form>
    <div id="modalEdicion" class="modal">
        <div class="modal-content">
            <span class="close" onclick="CerrarModalEdicion()">&times;</span>
            <h2 id="nombreProducto"></h2> <!-- Mostrará el nombre del producto -->
            <label for="nuevaCantidad">Nueva Cantidad:</label>
            <input type="number" id="nuevaCantidad">
            <label for="nuevoPrecio">Nuevo Precio:</label>
            <input type="number" step="0.1" id="nuevoPrecio">
            <button onclick="GuardarEdicion()">Guardar</button>
        </div>
    </div>


</div>


@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
    <script>
        var num = 0;
        var detalles = []; // Array para almacenar los detalles

        function AgregarDetalle() {
            let Codigo = document.getElementById("ProductoCodigo").value;
            let Nombre = document.getElementById("ProductoNombre").value;
            let Cantidad = document.getElementById("ProductoCantidad").value;
            let Precio = document.getElementById("ProductoPrecio").value;

            if (Codigo && Nombre && Cantidad && Precio && !isNaN(Cantidad) && Cantidad > 0
                                                       && !isNaN(Precio) && Precio > 0) {
                // Verificar si el producto ya existe en la lista de detalles
                var existeProducto = detalles.some(function (detalle) {
                    return detalle.Codigo === Codigo && detalle.Nombre === Nombre;
                });

                if (!existeProducto) {

                    let Tabla = document.getElementById("tablaDetalle");
                    let TR = document.createElement("tr");

                    // Asignar un id único a la fila
                    TR.id = "fila_" + Codigo;

                    let TDCodigo = document.createElement("td");
                    TDCodigo.style.textAlign = "center";
                    let TDNombre = document.createElement("td");
                    let TDCantidad = document.createElement("td");
                    TDCantidad.style.textAlign = "right";
                    let TDPrecio = document.createElement("td");
                    TDPrecio.style.textAlign = "right";
                    let TDAcciones = document.createElement("td");
                    TDAcciones.style.textAlign = "center";
                    let botonEditar = document.createElement("button");
                    let botonEliminar = document.createElement("button");

                    botonEditar.textContent = "Editar";
                    botonEditar.className = "btn btn-warning";
                    botonEditar.type = "button";
                    botonEditar.onclick = function () {
                        // Llama a la función para abrir el modal de edición
                        AbrirModalEdicion(Codigo, Nombre, Cantidad, Precio);
                    };

                    botonEliminar.textContent = "Eliminar";
                    botonEliminar.className = "btn btn-danger";
                    botonEliminar.type = "button";
                    botonEliminar.id = "eliminar_" + Codigo;
                    botonEliminar.onclick = function () {
                        EliminarProducto(this.id);
                    };

                    TDAcciones.appendChild(botonEditar);
                    TDAcciones.appendChild(botonEliminar);

                    TR.appendChild(TDCodigo);
                    TR.appendChild(TDNombre);
                    TR.appendChild(TDCantidad);
                    TR.appendChild(TDPrecio);
                    TR.appendChild(TDAcciones);

                    Tabla.appendChild(TR);
                    TDCodigo.innerHTML = Codigo;
                    TDNombre.innerHTML = Nombre;
                    TDCantidad.innerHTML = Cantidad;
                    TDPrecio.innerHTML = Precio;


                    let divDetalles = document.getElementById("detalles");
                    let HiddenCodigo = document.createElement("input");
                    let HiddenNombre = document.createElement("input");
                    let HiddenCantidad = document.createElement("input");
                    let HiddenPrecio = document.createElement("input");


                    // Crear un div para englobar los tres input ocultos
                    let divContenedor = document.createElement("div");
                    // Asignar el id igual al valor de Codigo
                    divContenedor.id = Codigo;

                    HiddenCodigo.name = "OrdenCompraDetalle[" + num + "].Codigo";
                    HiddenCodigo.value = Codigo;
                    HiddenCodigo.type = "hidden";

                    HiddenNombre.name = "OrdenCompraDetalle[" + num + "].Nombre";
                    HiddenNombre.value = Nombre;
                    HiddenNombre.type = "hidden";

                    HiddenCantidad.name = "OrdenCompraDetalle[" + num + "].Cantidad";
                    HiddenCantidad.value = Cantidad;
                    HiddenCantidad.type = "hidden";

                    Precio = Precio.replace(".", ",");
                    HiddenPrecio.name = "OrdenCompraDetalle[" + num + "].Precio";
                    HiddenPrecio.value = Precio;
                    HiddenPrecio.type = "hidden";
                    Precio = Precio.replace(",", ".");


                    // Agregar los cuatro input ocultos al div contenedor
                    divContenedor.appendChild(HiddenCodigo);
                    divContenedor.appendChild(HiddenNombre);
                    divContenedor.appendChild(HiddenCantidad);
                    divContenedor.appendChild(HiddenPrecio);

                    // Agregar el div contenedor al documento
                    divDetalles.appendChild(divContenedor);

                    // Agregar el detalle al array
                    detalles.push({
                        Codigo: Codigo,
                        Nombre: Nombre
                    });

                    document.getElementById("ProductoCodigo").value = "";
                    document.getElementById("ProductoNombre").value = "";
                    document.getElementById("ProductoCantidad").value = "";
                    document.getElementById("ProductoPrecio").value = "";

                    num++;
                } else {
                    // Mostrar un mensaje de error si el producto ya existe
                    alert("El producto ya está en la lista de detalles.");
                    document.getElementById("ProductoCodigo").value = "";
                    document.getElementById("ProductoNombre").value = "";
                    document.getElementById("ProductoCantidad").value = "";
                    document.getElementById("ProductoPrecio").value = "";
                }
            } else {
                // Mostrar un mensaje de error si los datos son inválidos
                alert("Por favor, ingrese un código válido, un nombre válido y una cantidad o precio válida mayor a cero.");
            }
       

        }


        function EliminarProducto(idBotonEliminar) {
            // Obtener el código del botón a partir del ID
            let codigoAEliminar = idBotonEliminar.split("_")[1]; // Obtener el código del ID

            console.log("Código a eliminar:", codigoAEliminar);

            // Eliminar el detalle del array
            detalles = detalles.filter(function (detalle) {
                return detalle.Codigo !== codigoAEliminar;
            });

            // Obtener la fila de la tabla por su id y eliminarla
            let filaAEliminar = document.getElementById("fila_" + codigoAEliminar);
            if (filaAEliminar) {
                filaAEliminar.parentNode.removeChild(filaAEliminar);
            }

            // Eliminar el input oculto por su id
            let divContenedorAEliminar = document.getElementById(codigoAEliminar);
            console.log("Contenedor a eliminar:", divContenedorAEliminar);

            if (divContenedorAEliminar) {
                // Eliminar el div
                divContenedorAEliminar.parentNode.removeChild(divContenedorAEliminar);


                // Llamar a la función para resetear los índices de los divs
                ResetearIndicesDivs();

               

            }
            
        }

        function ResetearIndicesDivs() {
            // Obtener todos los divs que contienen elementos a modificar
            const divs = document.querySelectorAll('#detalles div');
            console.log("div a modificar:", divs);

            // Inicializar un contador de índices
            let indice = 0;
            console.log("Indice:", indice);

            // Iterar sobre cada div
            divs.forEach((div) => {
                // Obtener todos los elementos dentro del div
                const elementos = div.querySelectorAll('input[name^="OrdenCompraDetalle"]');
                console.log("elementos dentro del div:", elementos);

                elementos.forEach((elemento) => {
                    elemento.setAttribute('name', elemento.getAttribute('name').replace(/\[\d+\]/g, `[${indice}]`));
                });

                // Incrementar el contador de índices
                indice++;
                
            });
            //Decrementar el num
            num--;
        }

        


        function ValidarYEnviar(event) {
            // Verificar si no hay productos agregados 
            if (detalles.length === 0) {
                // Mostrar un mensaje de error o tomar cualquier otra acción que desees
                alert("No se pueden confirmar órdenes sin productos agregados.");
                // Cancelar la acción de envío del formulario
                event.preventDefault();
            }
            // Si hay productos, el formulario se enviará normalmente
        }

        function AbrirModalEdicion(codigo, nombre, cantidad, precio) {
            const detalle = detalles.find(detalle => detalle.Codigo === codigo);

            // Pasa el código al modal
            document.getElementById("nuevaCantidad").value = cantidad;

            document.getElementById("nuevoPrecio").value = precio;

            // Pasa el nombre al modal
            document.getElementById("nombreProducto").textContent = nombre;

            // Pasa el código a una variable global para su uso en la función GuardarEdicion
            ultimoCodigoSeleccionado = codigo;

            // Muestra el modal
            document.getElementById("modalEdicion").style.display = "block";
        }

        // Función para cerrar el modal de edición
        function CerrarModalEdicion() {
            document.getElementById("modalEdicion").style.display = "none";
        }

        function GuardarEdicion() {
            // Obtén la nueva cantidad del campo en el modal
            const nuevaCantidad = parseInt(document.getElementById("nuevaCantidad").value);
            const nuevoPrecio = parseFloat(document.getElementById("nuevoPrecio").value);

            // Encuentra el detalle en el array detalles por su código
            const detalle = detalles.find(detalle => detalle.Codigo === ultimoCodigoSeleccionado);

            // Actualiza la cantidad solo para el producto seleccionado
            if (detalle) {
                detalle.Cantidad = nuevaCantidad;
                detalle.Precio = nuevoPrecio;
                // Actualiza la cantidad en la fila de la tabla correspondiente
                const fila = document.getElementById("fila_" + ultimoCodigoSeleccionado);
                if (fila) {
                    fila.querySelector("td:nth-child(3)").textContent = nuevaCantidad;
                    fila.querySelector("td:nth-child(4)").textContent = nuevoPrecio;

                }
            }

            // Cierra el modal de edición
            CerrarModalEdicion();
        }

        
    </script>



    <script>
        // Convierte las listas de códigos y nombres en arrays de JavaScript
        var productoCodigoLista = @Html.Raw(Json.Serialize(Model.ProductoCodigoLista.Select(x => x.Value).ToList()));
        var productoNombreLista = @Html.Raw(Json.Serialize(Model.ProductoNombreLista.Select(x => x.Value).ToList()));

        var ultimoCodigoSeleccionado = ""; // Variable para rastrear el último código seleccionado
        var ultimoNombreSeleccionado = ""; // Variable para rastrear el último nombre seleccionado

        // Agregar un evento de cambio para el campo ProductoNombre
        $("#ProductoCodigo, #ProductoNombre").on("input change", function () {
            var codigoSeleccionado = $("#ProductoCodigo").val();
            var nombreSeleccionado = $("#ProductoNombre").val();

            if (codigoSeleccionado !== ultimoCodigoSeleccionado) {
                // Si se cambió el código, autocompletar el campo nombre
                var indiceCodigo = productoCodigoLista.indexOf(codigoSeleccionado);
                if (indiceCodigo !== -1) {
                    var nombreCorrespondiente = productoNombreLista[indiceCodigo];
                    $("#ProductoNombre").val(nombreCorrespondiente);
                }
                ultimoCodigoSeleccionado = codigoSeleccionado;
            } else if (nombreSeleccionado !== ultimoNombreSeleccionado) {
                // Si se cambió el nombre, autocompletar el campo código
                var indiceNombre = productoNombreLista.indexOf(nombreSeleccionado);
                if (indiceNombre !== -1) {
                    var codigoCorrespondiente = productoCodigoLista[indiceNombre];
                    $("#ProductoCodigo").val(codigoCorrespondiente);
                }
                ultimoNombreSeleccionado = nombreSeleccionado;
            }
        });

    </script>

    <style>
        /* Estilos para el modal */
        .modal {
            display: none; /* Por defecto, el modal está oculto */
            position: fixed;
            top: 70px; /* Margen superior de 70px */
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Fondo semi-transparente */
            z-index: 1000; /* Valor alto para que esté en la parte superior */
        }

        .modal-content {
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 400px;
            margin: 0 auto; /* Centrar horizontalmente */
            padding: 20px;
            position: relative;
        }

        /* Estilos para el botón de cerrar el modal */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
        }

        /* Estilos para el campo de entrada y el botón en el modal */
        label {
            display: block;
            margin-bottom: 5px;
        }

        input[type="number"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        button {
            background-color: #007bff;
            color: #fff;
            padding: 8px 16px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

            button:hover {
                background-color: #0056b3;
            }




    </style>

  } 

